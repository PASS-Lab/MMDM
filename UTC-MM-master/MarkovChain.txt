"""
Author: Christian Lozoya, 2017
"""

import os
import numpy as np
import pandas as pd
from Utilities import DataHandler as dh
from Utilities import MathHandler as mh




def markov_chain(stateVector, transitionMatrix, iterations):
    """
    initialState is multiplied by transitionMatrix as many times as iterations.
    Each result is stored in a list.
    stateVector: pandas Series
    transitionMatrix: pandas DataFrame
    iterations: int
    """
    tol = 0.001
    lookBehind = 20
    markovChain = [stateVector]
    lookAhead = 0
    for i in range(10000 - 1):
        markovChain.append(pd.Series(markovChain[i].dot(transitionMatrix)))
        comparison = np.allclose(markovChain[i], markovChain[i+1], tol, tol)
        if comparison:
            lookAhead += 1
        else:
            lookAhead = 0

        if lookAhead >= lookBehind:
            comparison2 = np.allclose(markovChain[i + 1 - lookAhead], markovChain[i + 1], tol, tol)
            if comparison2:
                break
            else:
                lookAhead = 0
    markovChain = dh.concat_data(seriesList=markovChain)

    return markovChain, markovChain.iloc[:, -1]


def transition_matrix(data, mode='series', condition=None):
    transitionMatrix = mh.symmetrical_matrix(data)
    if mode == 'series':
        for j, column in enumerate(data.columns):
            for i, row in enumerate(data.iterrows()):
                if i != len(data.index) - 1:
                    a = data.iloc[i, j]
                    b = data.iloc[i + 1, j]
                    try:
                        if not condition:
                            transitionMatrix.loc[a, b] += 1
                        else:
                            if condition(a, b):
                                transitionMatrix.loc[a, b] += 1
                    except:
                        pass
    elif mode == 'parallel':
        for i, row in enumerate(data.iterrows()):
            for j, column in enumerate(data.columns):
                if j != len(data.columns) - 1:
                    a = data.iloc[i, j]
                    b = data.iloc[i, j + 1]
                    try:
                        if not condition:
                            transitionMatrix.loc[a, b] += 1
                        else:
                            if condition(a, b):
                                transitionMatrix.loc[a, b] += 1
                    except:
                        pass
    return transitionMatrix


def transition_probability_matrix(dataFrameList, mode='parallel', condition=None):
    """
    series considers transitions from row to row for each column, regardless of index.
    parallel considers transitions from column to column for each index.
    dataFrameList: list of pandas DataFrames
    mode: 'series' or 'parallel'
    condition: Python functions greater than, less than, greater than or equal to, less than or equal to
    return: pandas DataFrame
    """
    transitionProbabilityMatrix = dh.normalize_axis(transition_matrix(dataFrameList, mode, condition))
    return transitionProbabilityMatrix